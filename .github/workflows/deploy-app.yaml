# Basic example of a GitHub Actions workflow that builds a Shiny app and deploys
# it to GitHub Pages.
#
# The agreed upon contract is:
#
# - Inspect the root directory for package dependencies
# - Install R and the found packages
# - Export the Shiny app directory to `./site`
# - On push events, deploy the exported app to GitHub Pages
#
# If this contract is not met or could be easily improved for others,
# please open a new Issue https://github.com/posit-dev/r-shinylive/
#
# The _magic_ of this workflow is in the `shinylive::export()` function, which
# creates a static version of the Shiny app into the folder `./site`.
# The exported app folder is then uploaded and deployed to GitHub Pages.
#
# When deploying to GitHub Pages, be sure to have the appropriate write
# permissions for your token (`pages` and `id-token`).

name: Deploy app

on:
  push:
    branches: main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: rstudio/shiny-workflows/setup-r-package@v1
        with:
          packages: |
            renv
            posit-dev/r-shinylive
            sessioninfo
          cache-version: ${{ github.event.inputs.cache-version }}

      - name: Find package dependencies
        shell: Rscript {0}
        id: packages
        run: |
          # Find package dependencies using {renv} and install with {pak}
          pak::pak(
            unique(renv::dependencies(".")$Package)
          )

      - name: Build site
        shell: Rscript {0}
        run: |
          # Find all numeric directories in root (app directories)
          app_dirs <- list.dirs(".", recursive = FALSE, full.names = FALSE)
          app_dirs <- app_dirs[grepl("^[0-9]+$", app_dirs)]
          app_dirs <- sort(app_dirs)

          cat("Found app directories:", paste(app_dirs, collapse = ", "), "\n")

          # Create site directory
          if (!dir.exists("site")) dir.create("site")

          # Export each app to its own subdirectory
          for (app_dir in app_dirs) {
            cat("Building app:", app_dir, "\n")
            shinylive::export(app_dir, "site", subdir = app_dir)
          }

          # Create index.html that links to all apps
          index_content <- paste0(
            "<!DOCTYPE html>\n",
            "<html>\n",
            "<head>\n",
            "  <title>Shiny Dashboard Templates</title>\n",
            "  <style>\n",
            "    body { font-family: Arial, sans-serif; margin: 40px; }\n",
            "    h1 { color: #333; }\n",
            "    .app-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }\n",
            "    .app-card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; text-decoration: none; color: inherit; transition: box-shadow 0.2s; }\n",
            "    .app-card:hover { box-shadow: 0 4px 8px rgba(0,0,0,0.1); }\n",
            "    .app-title { font-size: 1.2em; font-weight: bold; margin-bottom: 10px; }\n",
            "    .app-description { color: #666; }\n",
            "  </style>\n",
            "</head>\n",
            "<body>\n",
            "  <h1>Shiny Dashboard Templates</h1>\n",
            "  <p>Click on any template below to view the interactive dashboard:</p>\n",
            "  <div class='app-grid'>\n"
          )

          for (app_dir in app_dirs) {
            index_content <- paste0(index_content,
              "    <a href='", app_dir, "/' class='app-card'>\n",
              "      <div class='app-title'>Template ", app_dir, "</div>\n",
              "      <div class='app-description'>Interactive Shiny dashboard template</div>\n",
              "    </a>\n"
            )
          }

          index_content <- paste0(index_content,
            "  </div>\n",
            "</body>\n",
            "</html>"
          )

          writeLines(index_content, "site/index.html")
          cat("Created index.html with links to", length(app_dirs), "apps\n")

      - name: Upload site artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: "site"

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
